# open api 3.1.0 spec
openapi: 3.0.2
info:
  title: Library API
  version: 1.0.0
  description: Library API
  contact:
    name: John Doe
    email: uno@cualquiera.com
    url: https://www.cualquiera.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v0
    description: Local server
    
paths:
  
  /books:
    get:
      summary: Get all books
      description: Get all books
      operationId: getBooks
      tags:
        - books
      responses:
        '200':
          description: returns all books in the library
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    # put method with id path parameter
    post:
      summary: Create a book
      description: Create a book
      operationId: createBook
      tags:
        - books
      requestBody:
        description: Book to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookContent'
      responses:
        '201':
          description: Book added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /books/{id}:
    put:
      summary: Modify a book
      description: Modify all the info of a book in the library by id
      operationId: updateBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: id of the book to modify
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Book to modify
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookContent'
      responses:
        '200':
          description: Book modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorId'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch:
      summary: Modify a book
      description: Modify some info of a book in the library by id
      operationId: updatePartialBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: id of the book to modify
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Book to modify
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookContent'
      responses:
        '200':
          description: Book modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorId'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    delete:
      summary: Delete a book
      description: Delete a book by id
      operationId: deleteBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: id of the book to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorId'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Lord of the Rings
        author:
          type: string
          example: J.R.R. Tolkien
    BookContent:
      type: object
      properties:
        title:
          type: string
          example: The Lord of the Rings
        author:
          type: string
          example: J.R.R. Tolkien
    Error500:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: Internal Server Error, please notify the administrator
    Error400:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Bad Request, please check the request body
    ErrorId:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: Book not found. Wrong id provided in the path request


